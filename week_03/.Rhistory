filter(subject == '3' | subject == '7' | subject == '17' | subject == '28')
dfplot$predicted <- predict(poisson_model, newdata=dfplot)
ggplot(dfplot, aes(x = pas, y = exp(predicted), fill=pas)) +
geom_bar(stat = 'identity') +
facet_wrap(~ subject)+
theme_minimal()
last_one <- glmer(correct~task + (1|suubject), data =lau_exp, family = 'binomial')
last_one <- glmer(correct~task + (1|subject), data =lau_exp, family = 'binomial')
last_one <- glmer(correct~task + (1|subject), data =lau_exp, family = 'binomial')
summar(last_one)
last_one <- glmer(correct~task + (1|subject), data =lau_exp, family = 'binomial')
summary(last_one)
last_one2 <- glmer(correct~task + pas + (1|subject), data =lau_exp, family = 'binomial')
summary(last_one2)
last_one3 <- glmer(correct~pas + (1|subject), data =lau_exp, family = 'binomial')
last_one4 <- glmer(correct~task*pas + (1|subject), data =lau_exp, family = 'binomial')
staircase <- df %>%
filter(df$trial.type == 'staircase')
staircase <- df %>%
filter(lau$trial.type == 'staircase')
staircase <- lau %>%
filter(lau$trial.type == 'staircase')
# Making a function to run a model for each participant
nopoolfun <- function(i){
dat <- staircase[which(staircase$subject == i),] # subsetting the data so it only includes one participant
model <- glm(correct ~ target.contrast, family = 'binomial', data = dat) # running a model on the data from one participant
fitted <- model$fitted.values # extracting the fitted values
plot_dat <- data.frame(cbind(fitted, 'target.contrast' = dat$target.contrast)) # creating a data frame with the variables needed in the plot
plot <- ggplot(plot_dat, aes(x = target.contrast, y = fitted))+ # plotting
geom_point(color = 'steelblue') +
xlab('Target Contrast') +
ylab('Predicted') +
ylim(c(0,1))+
ggtitle(paste0('Paticipant ', as.character(i))) +
theme_minimal() +
theme(plot.title = element_text(size = 10), axis.title=element_text(size = 8), axis.text=element_text(size=6))
return(plot)
}
# Running the function for every participant (doing it twice so the plots are nicer to look at)
subjects <- c(1:16)
plots <- lapply(subjects, FUN=nopoolfun)
do.call(grid.arrange,  plots)
pacman::p_load(dfoptim, gridExtra)
staircase <- lau %>%
filter(lau$trial.type == 'staircase')
# Making a function to run a model for each participant
nopoolfun <- function(i){
dat <- staircase[which(staircase$subject == i),] # subsetting the data so it only includes one participant
model <- glm(correct ~ target.contrast, family = 'binomial', data = dat) # running a model on the data from one participant
fitted <- model$fitted.values # extracting the fitted values
plot_dat <- data.frame(cbind(fitted, 'target.contrast' = dat$target.contrast)) # creating a data frame with the variables needed in the plot
plot <- ggplot(plot_dat, aes(x = target.contrast, y = fitted))+ # plotting
geom_point(color = 'steelblue') +
xlab('Target Contrast') +
ylab('Predicted') +
ylim(c(0,1))+
ggtitle(paste0('Paticipant ', as.character(i))) +
theme_minimal() +
theme(plot.title = element_text(size = 10), axis.title=element_text(size = 8), axis.text=element_text(size=6))
return(plot)
}
# Running the function for every participant (doing it twice so the plots are nicer to look at)
subjects <- c(1:16)
plots <- lapply(subjects, FUN=nopoolfun)
do.call(grid.arrange,  plots)
subjects <- c(17:29)
plots <- lapply(subjects, FUN=nopoolfun)
do.call(grid.arrange,  plots)
# running a partial pooling model on the data
model <- glmer(correct ~ target.contrast + (1 + target.contrast | subject), family = 'binomial', data = staircase)
partialpoolfun <- function(i){
#this first section is identical to the nopoolfun function
dat <- staircase[which(staircase$subject == i),]
model1 <- glm(correct ~ target.contrast, family = 'binomial', data = dat)
fitted <- model1$fitted.values
plot_dat <- data.frame(cbind(fitted, 'target.contrast' = dat$target.contrast))
newdf<- data.frame(cbind(seq(0, 1, by = 0.01),rep(i))) # here a data frame is created with 'made-up' target.contrast values as well as a column with the subject number
colnames(newdf) <- c('target.contrast', 'subject') #renaming the columns so it matches the variable names in the model
newdf$predictmod <- predict(model, type = 'response', newdata = newdf) # predicting using the model and the data frame just created
plot <- ggplot(plot_dat, aes(x = target.contrast, y = fitted)) + #plotting
geom_point(color = 'steelblue') +
geom_line(data = newdf, aes(x = target.contrast, y = predictmod)) +
scale_colour_manual(values=c("#000066"))+
xlab('Target Contrast') +
ylab('Predicted') +
ylim(c(0,1))+
ggtitle(paste0('Paticipant ', as.character(i))) +
theme_minimal() +
theme(plot.title = element_text(size = 10), axis.title=element_text(size = 8), axis.text=element_text(size=6))
return(plot)
}
subjects <- c(1:16)
plots <- lapply(subjects, FUN=partialpoolfun)
do.call(grid.arrange,  plots)
subjects <- c(17:29)
plots <- lapply(subjects, FUN=partialpoolfun)
do.call(grid.arrange,  plots)
# running a partial pooling model on the data
model <- glmer(correct ~ target.contrast + (1 + target.contrast | subject), family = 'binomial', data = staircase)
partialpoolfun <- function(i){
#this first section is identical to the nopoolfun function
dat <- staircase[which(staircase$subject == i),]
model1 <- glm(correct ~ target.contrast, family = 'binomial', data = dat)
fitted <- model1$fitted.values
plot_dat <- data.frame(cbind(fitted, 'target.contrast' = dat$target.contrast))
newdf<- data.frame(cbind(seq(0, 1, by = 0.01),rep(i))) # here a data frame is created with 'made-up' target.contrast values as well as a column with the subject number
colnames(newdf) <- c('target.contrast', 'subject') #renaming the columns so it matches the variable names in the model
newdf$predictmod <- predict(model, type = 'response', newdata = newdf) # predicting using the model and the data frame just created
plot <- ggplot(plot_dat, aes(x = target.contrast, y = fitted)) + #plotting
geom_point(color = 'steelblue') +
geom_line(data = newdf, aes(x = target.contrast, y = predictmod)) +
scale_colour_manual(values=c("#000066"))+
xlab('Target Contrast') +
ylab('Predicted') +
ylim(c(0,1))+
ggtitle(paste0('Paticipant ', as.character(i))) +
theme_minimal() +
theme(plot.title = element_text(size = 10), axis.title=element_text(size = 8), axis.text=element_text(size=6))
return(plot)
}
subjects <- c(1:16)
plots <- lapply(subjects, FUN=partialpoolfun)
do.call(grid.arrange,  plots)
subjects <- c(17:29)
plots <- lapply(subjects, FUN=partialpoolfun)
do.call(grid.arrange,  plots)
# running a partial pooling model on the data
model <- glmer(correct ~ target.contrast + (1 + target.contrast | subject), family = 'binomial', data = staircase)
# Making function to run a model for each participant and plotting the estimated functions for each participant
partialpoolfun <- function(i){
# new df for each participant
dat <- staircase[which(staircase$subject == i),]
# model for each participant
model1 <- glm(correct ~ target.contrast, family = 'binomial', data = dat)
# extracting fitted values from the model from each participant
fitted <- model1$fitted.values
# new df containing the fitted values and target contrast
plot_dat <- data.frame(cbind(fitted, 'target.contrast' = dat$target.contrast))
# another new df containing hypothetical target contrast values and subject number
newdf<- data.frame(cbind(seq(0, 1, by = 0.01),rep(i)))
colnames(newdf) <- c('target.contrast', 'subject')
# adding the predicted values for the hypothetical target contrast values
newdf$predictmod <- predict(model, type = 'response', newdata = newdf)
# plotting
plot <- ggplot(plot_dat, aes(x = target.contrast, y = fitted))+
geom_point(colour = "steelblue") +
geom_line(data = newdf, aes(x = target.contrast, y = predictmod)) +
xlab('Target Contrast') +
ylab('Predicted') +
ylim(c(0,1))+
ggtitle(paste0('Paticipant ', as.character(i))) +
theme_minimal() +
theme(plot.title = element_text(size = 10), axis.title=element_text(size = ðŸ˜Ž, axis.text=element_text(size=6))
# running a partial pooling model on the data
model <- glmer(correct ~ target.contrast + (1 + target.contrast | subject), family = 'binomial', data = staircase)
# Making function to run a model for each participant and plotting the estimated functions for each participant
partialpoolfun <- function(i){
# new df for each participant
dat <- staircase[which(staircase$subject == i),]
# model for each participant
model1 <- glm(correct ~ target.contrast, family = 'binomial', data = dat)
# extracting fitted values from the model from each participant
fitted <- model1$fitted.values
# new df containing the fitted values and target contrast
plot_dat <- data.frame(cbind(fitted, 'target.contrast' = dat$target.contrast))
# another new df containing hypothetical target contrast values and subject number
newdf<- data.frame(cbind(seq(0, 1, by = 0.01),rep(i)))
colnames(newdf) <- c('target.contrast', 'subject')
# adding the predicted values for the hypothetical target contrast values
newdf$predictmod <- predict(model, type = 'response', newdata = newdf)
# plotting
plot <- ggplot(plot_dat, aes(x = target.contrast, y = fitted))+
geom_point(colour = "steelblue") +
geom_line(data = newdf, aes(x = target.contrast, y = predictmod)) +
xlab('Target Contrast') +
ylab('Predicted') +
ylim(c(0,1))+
ggtitle(paste0('Paticipant ', as.character(i))) +
theme_minimal() +
theme(plot.title = element_text(size = 10), axis.title=element_text(size = 8), axis.text=element_text(size=6))
return(plot)
}
subjects <- c(1:16)
plots <- lapply(subjects, FUN=partialpoolfun)
do.call(grid.arrange,  plots)
subjects <- c(17:29)
plots <- lapply(subjects, FUN=partialpoolfun)
do.call(grid.arrange,  plots)
knitr::opts_chunk$set(echo = TRUE)
#Creating matrix
x <- 1:3
y <- 10:13
cbind(x, y)
rbind(x, y)
#OR
m <- matrix(1:6, nrow = 2, ncol = 3)
m
#getting the dimensions of the matrix
dim(m)
# create a vector
v <- 1:10
v
#telling it that we want the matrix to be 2 rows and 5 columns
dim(v) <- c(2,5)
# create a vector
v <- 1:10
v
#telling it that we want the matrix to be 2 rows and 5 columns
dim(v) <- c(2,5)
v
# create a vector
v <- 1:10
#telling it that we want the matrix to be 2 rows and 5 columns
dim(v) <- c(2,5)
v
# create a vector
m1 <- 1:10
#telling it that we want the matrix to be 2 rows and 5 columns
dim(m1) <- c(2,5)
m1
#create a matrix with cbind and rbind
x <- 1:3
y <- 10:12
cbind(x,y)
#create a matrix with cbind and rbind
x <- 1:3
y <- 10:12
cbind(x,y)
rbind(x,y)
x <- factor(c('yes', 'yes', 'no', 'yes', 'no'))
x
levels
tabel(x)
x <- factor(c('yes', 'yes', 'no', 'yes', 'no'))
x
levels
table(x)
unclass(x)
attr(,'levels')
x <- factor(c('yes', 'yes', 'no', 'yes', 'no'),
levels = c('yes', 'no'))
attr(,'levels')
x <- factor(c('yes', 'yes', 'no', 'yes', 'no'))
x
levels
#frequency count of yes and nos
table(x)
#bring it down to a integer vector yes is coded as 2 and no as 1
unclass(x)
x <- factor(c('yes', 'yes', 'no', 'yes', 'no'),
levels = c('yes', 'no'))
levels
x <- factor(c('yes', 'yes', 'no', 'yes', 'no'),
levels = c('yes', 'no'))
levels
levels(x)
knitr::opts_chunk$set(echo = TRUE)
setwd("/Users/CarolineHommel/Desktop/Uni/Semester tres/Methods 3/methods git/github_methods_3/week_03")
library('tidyverse')
library('lme4')
library('dplyr')
pacman::p_load(dfoptim, gridExtra)
# Making a data frame with the data from experiment 2
lau_files <- list.files(path = "experiment_2",
pattern = ".csv",
full.names = T)
lau <- data.frame() # Creating empty data frame
for (i in 1:length(lau_files)){
new_dat <- read.table(lau_files[i], sep = ",", header = TRUE, dec = ',' )
lau <- rbind(new_dat, lau)
} # Going through each of the files on the list, reading them and them adding them to the data frame
#Changing even and odd to e's and o's
lau$target.type <- replace(lau$target.type, lau$target.type == "even", "e")
lau$target.type <- replace(lau$target.type, lau$target.type == "odd", "o")
#Creating a new column called 'correct' and telling it to write 1 if the same letter is present in target.type and obj.resp and 0 if it is not correct
lau$correct <- ifelse((lau$target.type == lau$obj.resp), 1, 0)
lau$rt.subj <- as.numeric(lau$rt.subj)
lau$rt.obj <- as.numeric(lau$rt.obj)
lau[sapply(lau, is.character)] <- lapply(lau[sapply(lau, is.character)], as.factor)
lau$cue <- as.factor(lau$cue)
lau$subject <- as.factor(lau$subject)
lau$correct <- as.factor(lau$correct)
lau$target.contrast <- as.numeric(lau$target.contrast)
staircase <- lau %>%
filter(lau$trial.type == 'staircase')
# Making a function to run a model for each participant
nopoolfun <- function(i){
dat <- staircase[which(staircase$subject == i),] # subsetting the data so it only includes one participant
model <- glm(correct ~ target.contrast, family = 'binomial', data = dat) # running a model on the data from one participant
fitted <- model$fitted.values # extracting the fitted values
plot_dat <- data.frame(cbind(fitted, 'target.contrast' = dat$target.contrast)) # creating a data frame with the variables needed in the plot
plot <- ggplot(plot_dat, aes(x = target.contrast, y = fitted))+ # plotting
geom_point(color = 'steelblue') +
xlab('Target Contrast') +
ylab('Predicted') +
ylim(c(0,1))+
ggtitle(paste0('Paticipant ', as.character(i))) +
theme_minimal() +
theme(plot.title = element_text(size = 10), axis.title=element_text(size = 8), axis.text=element_text(size=6))
return(plot)
}
# Running the function for every participant (doing it twice so the plots are nicer to look at)
subjects <- c(1:16)
plots <- lapply(subjects, FUN=nopoolfun)
do.call(grid.arrange,  plots)
subjects <- c(17:29)
plots <- lapply(subjects, FUN=nopoolfun)
do.call(grid.arrange,  plots)
# running a partial pooling model on the data
model <- glmer(correct ~ target.contrast + (1 + target.contrast | subject), family = 'binomial', data = staircase)
# Making function to run a model for each participant and plotting the estimated functions for each participant
partialpoolfun <- function(i){
# new df for each participant
dat <- staircase[which(staircase$subject == i),]
# model for each participant
model1 <- glm(correct ~ target.contrast, family = 'binomial', data = dat)
# extracting fitted values from the model from each participant
fitted <- model1$fitted.values
# new df containing the fitted values and target contrast
plot_dat <- data.frame(cbind(fitted, 'target.contrast' = dat$target.contrast))
# another new df containing hypothetical target contrast values and subject number
newdf<- data.frame(cbind(seq(0, 1, by = 0.01),rep(i)))
colnames(newdf) <- c('target.contrast', 'subject')
# adding the predicted values for the hypothetical target contrast values
newdf$predictmod <- predict(model, type = 'response', newdata = newdf)
# plotting
plot <- ggplot(plot_dat, aes(x = target.contrast, y = fitted))+
geom_point(colour = "steelblue") +
geom_line(data = newdf, aes(x = target.contrast, y = predictmod)) +
xlab('Target Contrast') +
ylab('Predicted') +
ylim(c(0,1))+
ggtitle(paste0('Paticipant ', as.character(i))) +
theme_minimal() +
theme(plot.title = element_text(size = 10), axis.title=element_text(size = 8), axis.text=element_text(size=6))
return(plot)
}
subjects <- c(1:16)
plots <- lapply(subjects, FUN=partialpoolfun)
do.call(grid.arrange,  plots)
subjects <- c(17:29)
plots <- lapply(subjects, FUN=partialpoolfun)
do.call(grid.arrange,  plots)
#filtering to only get the experiment trials
lau_exp <- lau %>%
filter( trial.type == "experiment")
#creating a new data frame with four participants in it
df4 <-  lau_exp%>%
filter(subject == '3' | subject == '7' | subject == '17' | subject == '28')
qqfun <- function(i){
interceptmodel <- lm(rt.obj ~ 1, data = df4, subset = subject == i)
qqnorm(resid(interceptmodel), pch = 1, frame = FALSE)
qqline(resid(interceptmodel), col = "steelblue", lwd = 2)
}
qqfun(3)
qqfun(7)
qqfun(17)
qqfun(28)
#Log-transforming the data
qqfun <- function(i){
interceptmodel <- lm(log(rt.obj) ~ 1, data = df4, subset = subject == i)
qqnorm(resid(interceptmodel), pch = 1, frame = FALSE)
qqline(resid(interceptmodel), col = "steelblue", lwd = 2)
}
qqfun(3)
qqfun(7)
qqfun(17)
qqfun(28)
partial1 <- lmer(log(rt.obj) ~ task + (1|subject), data = lau_exp, REML = FALSE)
partial2 <- lmer(log(rt.obj) ~ task + (1|trial), data = lau_exp, REML = FALSE)
partial3 <- lmer(log(rt.obj) ~ task + (1|subject) + (1|trial), data = lau_exp, REML = FALSE)
partial4 <- lmer(log(rt.obj) ~ task + (1+task|subject) , data = lau_exp, REML = FALSE)
partial5 <- lmer(log(rt.obj) ~ task + (1+task|subject) + (1|trial), lau_exp, REML = F)
summary(partial1)
summary(partial2)
summary(partial3)
summary(partial4)
summary(partial5)
model_text <- c("subject", "trial", "subject og trial", "task-subject","task-subject og trial")
#sigma explains variance
sigmas <- c(sigma(partial1),sigma(partial2),sigma(partial3), sigma(partial4), sigma(partial5))
AIC <- c(AIC(partial1), AIC(partial2), AIC(partial3), AIC(partial4), AIC(partial5))
mtable <- as_tibble(cbind(model_text,sigmas,AIC))
mtable
interactio <- lm(log(rt.obj) ~ task*pas, lau_exp)
interactio_mix <- lmer(log(rt.obj) ~ task*pas + (1|subject), data = lau_exp, REML = F)
interactio_mix1 <- lmer(log(rt.obj) ~ task*pas + (1|trial) + (1|subject), data = lau_exp, REML = F)
interactio_mix2 <- lmer(log(rt.obj) ~ task*pas + (1|trial) + (1|subject) + (1|cue), data = lau_exp, REML = F)
sing_fit <- lmer(log(rt.obj) ~ task*pas + (1|trial) + (1|subject) + (1|cue) + (1|target.contrast), data = lau_exp, REML = F)
print(VarCorr(sing_fit), comp='Variance')
data.count <- lau_exp %>% group_by(subject, pas, task) %>% summarise(count=n())
poisson_model <- glmer(count ~ pas*task + (1 + pas|subject), family = "poisson", data = data.count, glmerControl(optimizer="bobyqa"))
summary(poisson_model)
poisson_model2 <- glmer(count ~ pas + task + (1 + pas|subject), family = "poisson", data = data.count, glmerControl(optimizer="bobyqa"))
modelos <- c("poisson_model", "poisson_model2")
#finding residual standard deviation
residual_standard_deviations <- c(sigma(poisson_model), sigma(poisson_model2))
#finding AIC
AIC_values <- c(AIC(poisson_model), AIC(poisson_model2))
#combining it all in a tibble
as.tibble(cbind(modelos, residual_standard_deviations, AIC_values))
dfplot <-  data.count%>%
filter(subject == '3' | subject == '7' | subject == '17' | subject == '28')
dfplot$predicted <- predict(poisson_model, newdata=dfplot)
ggplot(dfplot, aes(x = pas, y = exp(predicted), fill=pas)) +
geom_bar(stat = 'identity') +
facet_wrap(~ subject)+
theme_minimal()
last_one <- glmer(correct~task + (1|subject), data =lau_exp, family = 'binomial')
summary(last_one)
last_one2 <- glmer(correct~task + pas + (1|subject), data =lau_exp, family = 'binomial')
summary(last_one2)
last_one3 <- glmer(correct~pas + (1|subject), data =lau_exp, family = 'binomial')
last_one4 <- glmer(correct~task*pas + (1|subject), data =lau_exp, family = 'binomial')
model_text <- c("Intercept", "Quadruplet", "Singles")
estimates <- c(multi_model@beta[1], multi_model@beta[5], multi_model@beta[6])
estimatesExp <- c(exp(multi_model@beta[1]), exp(multi_model@beta[5]), exp(multi_model@beta[6]))
tasktable <- as_tibble(cbind(model_text,estimates,estimatesExp))
tasktable
model_text <- c("Pas 2, quadruplet", "Pas 3, quadruplet", "Pas 4, quadruplet","Pas 2, singles", "Pas 3, singles", "Pas 4, singles")
estimates <- c(multi_model@beta[7], multi_model@beta[8], multi_model@beta[9], multi_model@beta[10], multi_model@beta[11], multi_model@beta[12])
estimatesExp <- c(exp(multi_model@beta[1]), exp(multi_model@beta[5]), exp(multi_model@beta[6]), exp(multi_model@beta[10]), exp(multi_model@beta[11]), exp(multi_model@beta[12]))
interactiontable <- as_tibble(cbind(model_text,estimates,estimatesExp))
interactiontable
df <- data.frame(woop=1:4, boop= c(T,F,T,F))
df
nrow(df)
ncol(df)
#Names
names <- 1:3
names(names)
names(names) <- c('hey', 'yo', 'whattup')
names
list <- list(a=1, b=2, c=3)
list
dimnames(m) <- list (c('a', 'b'), c('c','d','e','f','g'))
m1
dimnames(m1) <- list (c('a', 'b'), c('c','d','e','f','g'))
m1
model_text <- c("Intercept", "Quadruplet", "Singles")
estimates <- c(multi_model@beta[1], multi_model@beta[5], multi_model@beta[6])
estimatesExp <- c(exp(multi_model@beta[1]), exp(multi_model@beta[5]), exp(multi_model@beta[6]))
tasktable <- as_tibble(cbind(model_text,estimates,estimatesExp))
tasktable
model_text <- c("Pas 2, quadruplet", "Pas 3, quadruplet", "Pas 4, quadruplet","Pas 2, singles", "Pas 3, singles", "Pas 4, singles")
estimates <- c(multi_model@beta[7], multi_model@beta[8], multi_model@beta[9], multi_model@beta[10], multi_model@beta[11], multi_model@beta[12])
estimatesExp <- c(exp(multi_model@beta[7]), exp(multi_model@beta[8]), exp(multi_model@beta[9]), exp(multi_model@beta[10]), exp(multi_model@beta[11]), exp(multi_model@beta[12]))
interactiontable <- as_tibble(cbind(model_text,estimates,estimatesExp))
interactiontable
model_text <- c("Intercept", "Quadruplet", "Singles")
estimates <- c(poisson_model@beta[1], poisson_model@beta[5], poisson_model@beta[6])
estimatesExp <- c(exp(poisson_model@beta[1]), exp(poisson_model@beta[5]), exp(poisson_model@beta[6]))
tasktable <- as_tibble(cbind(model_text,estimates,estimatesExp))
tasktable
model_text <- c("Pas 2, quadruplet", "Pas 3, quadruplet", "Pas 4, quadruplet","Pas 2, singles", "Pas 3, singles", "Pas 4, singles")
estimates <- c(poisson_model@beta[7], poisson_model@beta[8], poisson_model@beta[9], poisson_model@beta[10], poisson_model@beta[11], poisson_model@beta[12])
estimatesExp <- c(exp(poisson_model@beta[7]), exp(poisson_model@beta[8]), exp(poisson_model@beta[9]), exp(poisson_model@beta[10]), exp(poisson_model@beta[11]), exp(poisson_model@beta[12]))
interactiontable <- as_tibble(cbind(model_text,estimates,estimatesExp))
interactiontable
poisson_model <- glmer(count ~ pas*task + (1 + pas|subject), family = "poisson", data = data.count, glmerControl(optimizer="bobyqa"))
summary(poisson_model)
poisson_model2 <- glmer(count ~ pas + task + (1 + pas|subject), family = "poisson", data = data.count, glmerControl(optimizer="bobyqa"))
modelos <- c("poisson_model", "poisson_model2")
#finding residual standard deviation
residual_standard_deviations <- c(sigma(poisson_model), sigma(poisson_model2))
#finding AIC
AIC_values <- c(AIC(poisson_model), AIC(poisson_model2))
#combining it all in a tibble
as.tibble(cbind(modelos, residual_standard_deviations, AIC_values))
model_text <- c("Intercept", "Quadruplet", "Singles")
estimates <- c(poisson_model@beta[1], poisson_model@beta[5], poisson_model@beta[6])
estimatesExp <- c(exp(poisson_model@beta[1]), exp(poisson_model@beta[5]), exp(poisson_model@beta[6]))
tasktable <- as_tibble(cbind(model_text,estimates,estimatesExp))
tasktable
model_text <- c("Pas 2, quadruplet", "Pas 3, quadruplet", "Pas 4, quadruplet","Pas 2, singles", "Pas 3, singles", "Pas 4, singles")
estimates <- c(poisson_model@beta[7], poisson_model@beta[8], poisson_model@beta[9], poisson_model@beta[10], poisson_model@beta[11], poisson_model@beta[12])
estimatesExp <- c(exp(poisson_model@beta[7]), exp(poisson_model@beta[8]), exp(poisson_model@beta[9]), exp(poisson_model@beta[10]), exp(poisson_model@beta[11]), exp(poisson_model@beta[12]))
interactiontable <- as_tibble(cbind(model_text,estimates,estimatesExp))
interactiontable
model_text <- c("Intercept", "Quadruplet", "Singles")
estimates <- c(poisson_model@beta[1], poisson_model@beta[5], poisson_model@beta[6])
estimatesExp <- c(exp(poisson_model@beta[1]), exp(poisson_model@beta[5]), exp(poisson_model@beta[6]))
tasktable <- as_tibble(cbind(model_text,estimates,estimatesExp))
tasktable
model_text <- c("Pas 2, quadruplet", "Pas 3, quadruplet", "Pas 4, quadruplet","Pas 2, singles", "Pas 3, singles", "Pas 4, singles")
estimates <- c(poisson_model@beta[7], poisson_model@beta[8], poisson_model@beta[9], poisson_model@beta[10], poisson_model@beta[11], poisson_model@beta[12])
estimatesExp <- c(exp(poisson_model@beta[7]), exp(poisson_model@beta[8]), exp(poisson_model@beta[9]), exp(poisson_model@beta[10]), exp(poisson_model@beta[11]), exp(poisson_model@beta[12]))
interactiontable
View(poisson_model)
View(poisson_model2)
View(poisson_model2)
model_text <- c("Intercept", "Quadruplet", "Singles")
estimates <- c(poisson_model@beta[1], poisson_model@beta[5], poisson_model@beta[6])
estimatesExp <- c(exp(poisson_model@beta[1]), exp(poisson_model@beta[5]), exp(poisson_model@beta[6]))
tasktable <- as_tibble(cbind(model_text,estimates,estimatesExp))
tasktable
model_text2 <- c("Pas 2, quadruplet", "Pas 3, quadruplet", "Pas 4, quadruplet","Pas 2, singles", "Pas 3, singles", "Pas 4, singles")
estimates2 <- c(poisson_model@beta[7], poisson_model@beta[8], poisson_model@beta[9], poisson_model@beta[10], poisson_model@beta[11], poisson_model@beta[12])
estimatesExp2 <- c(exp(poisson_model@beta[7]), exp(poisson_model@beta[8]), exp(poisson_model@beta[9]), exp(poisson_model@beta[10]), exp(poisson_model@beta[11]), exp(poisson_model@beta[12]))
interactiontable <- as_tibble(cbind(model_text2,estimates2,estimatesExp2))
interactiontable
model_text <- c("Intercept", "Quadruplet", "Singles")
estimates <- c(poisson_model@beta[1], poisson_model@beta[5], poisson_model@beta[6])
estimatesExp <- c(exp(poisson_model@beta[1]), exp(poisson_model@beta[5]), exp(poisson_model@beta[6]))
tasktable <- as_tibble(cbind(model_text,estimates,estimatesExp))
tasktable
model_text2 <- c("Pas 2, quadruplet", "Pas 3, quadruplet", "Pas 4, quadruplet","Pas 2, singles", "Pas 3, singles", "Pas 4, singles")
estimates2 <- c(poisson_model@beta[7], poisson_model@beta[8], poisson_model@beta[9], poisson_model@beta[10], poisson_model@beta[11], poisson_model@beta[12])
estimatesExp2 <- c(exp(poisson_model@beta[7]), exp(poisson_model@beta[8]), exp(poisson_model@beta[9]), exp(poisson_model@beta[10]), exp(poisson_model@beta[11]), exp(poisson_model@beta[12]))
interactiontable <- as_tibble(cbind(model_text2,estimates2,estimatesExp2))
interactiontable
tasktable
